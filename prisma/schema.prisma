// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output  = "./node_modules/@prisma/client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id              String    @id @default(uuid()) @map("_id")
  email           String    @unique
  password        String
  name            String?
  displayName     String?
  bio             String?
  is_premium      Boolean   @default(false)
  privecy_setting String    @default("public")
  last_login_at   DateTime? @default(now())
  posts           Post[]    @relation("AdminPosts")

  role Role @default(admin)
}

model User {
  id          String  @id @default(uuid()) @map("_id")
  email       String  @unique
  password    String
  name        String?
  displayName String?
  bio         String?

  is_premium      Boolean       @default(false)
  privecy_setting String        @default("public")
  last_login_at   DateTime?     @default(now())
  posts           Post[]        @relation("UserPosts")
  postComments    PostComment[] // Added relation field
  postLikes       PostLike[] // Added opposite relation field
  postShares      PostShare[] // Added opposite relation field
  workouts        Workouts[]    @relation("UserWorkouts")
  refreshToken    RefreshToken? // Added opposite relation field

  // Opposite relation fields for UserFollow
  followers UserFollow[] @relation("Following")
  following UserFollow[] @relation("Follower")

  role      Role     @default(user)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([displayName])
}

model UserFollow {
  id          String   @id @default(uuid()) @map("_id")
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  created_at  DateTime @default(now())

  @@unique([followerId, followingId])
}

model RefreshToken {
  id        String   @id @default(uuid()) @map("_id")
  token     String // Store hashed token
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

enum Role {
  user
  admin
}

model Post {
  id             String        @id @default(uuid()) @map("_id")
  title          String
  content        String?
  caption        String?
  is_public      Boolean       @default(true)
  is_featured    Boolean
  // Media
  image_url      String?
  image_publicId String? // For Cloudinary deletion
  video_url      String?
  video_publicId String?
  post_likes     PostLike[]
  post_comments  PostComment[]
  post_shares    PostShare[]
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  like_count     Int           @default(0)
  comment_count  Int           @default(0)
  user           User?         @relation("UserPosts", fields: [user_id], references: [id])
  user_id        String?

  admin    admin?  @relation("AdminPosts", fields: [admin_id], references: [id])
  admin_id String?

  workout    Workouts? @relation(fields: [workout_id], references: [id])
  workout_id String?    @unique

  @@index([created_at])
  @@index([title])
  @@index([content])
  @@index([caption])
}

model PostLike {
  id         String   @id @default(uuid()) @map("_id")
  user_id    String
  post_id    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}

model PostComment {
  id         String        @id @default(uuid()) @map("_id")
  content    String
  user       User          @relation(fields: [user_id], references: [id])
  user_id    String
  post       Post          @relation(fields: [post_id], references: [id])
  post_id    String
  parent_id  String? // For nested comments
  parent     PostComment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies    PostComment[] @relation("CommentReplies")
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@index([created_at])
}

model PostShare {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    String
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
}

enum ExerciseType {
  strength
  cardio
}

model Workouts {
  id          String  @id @default(uuid()) @map("_id")
  title       String
  template_id String?
  is_public   Boolean @default(true)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User?   @relation("UserWorkouts", fields: [user_id], references: [id])
  user_id String?

  template  Template?  @relation("TemplateWorkouts", fields: [template_id], references: [id])
  exercises Exercise[]

  post    Post?   @relation
  post_id String?

  // admin       admin?    @relation("AdminWorkouts", fields: [admin_id], references: [id])
  // admin_id    String?

  @@index([created_at])
  @@index([user_id])
  @@index([template_id])
  @@index([post_id])
  @@index([title])
}

model Exercise {
  id         String        @id @default(uuid()) @map("_id")
  workout    Workouts      @relation(fields: [workout_id], references: [id])
  workout_id String
  name       String
  type       ExerciseType
  sets       ExerciseSet[]
  created_at DateTime      @default(now())

  @@index([workout_id])
  @@index([name])
  @@index([type])
}

model ExerciseSet {
  id          String   @id @default(uuid()) @map("_id")
  exercise    Exercise @relation(fields: [exercise_id], references: [id])
  exercise_id String
  set_number  Int

  weight      Float?
  reps        Int?
  distance_km Float?
  duration    String
  created_at  DateTime @default(now())

  @@index([exercise_id])
  @@index([set_number])
  @@index([created_at])
}

model Template {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  description String?
  is_public   Boolean @default(true)

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  workouts   Workouts[] @relation("TemplateWorkouts")
}
