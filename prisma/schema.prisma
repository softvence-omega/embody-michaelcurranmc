// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output  = "./node_modules/@prisma/client"
  output   = "@generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id              String    @id @default(uuid()) @map("_id")
  email           String    @unique
  password        String
  name            String?
  displayName     String?
  bio             String?
  is_premium      Boolean   @default(false)
  privecy_setting String    @default("public")
  last_login_at   DateTime? @default(now())
  posts           Post[]    @relation("AdminPosts")

  role Role @default(admin)
}

model User {
  id               String  @id @default(uuid()) @map("_id")
  email            String  @unique
  password         String
  name             String?
  displayName      String?
  bio              String?
  userImageUrl     String?
  userImageBackurl String?

  is_premium         Boolean             @default(false)
  privecy_setting    String              @default("public")
  last_login_at      DateTime?           @default(now())
  posts              Post[]              @relation("UserPosts")
  postComments       PostComment[] // Added relation field
  postLikes          PostLike[] // Added opposite relation field
  postShares         PostShare[] // Added opposite relation field
  workouts           Workouts[]          @relation("UserWorkouts")
  refreshToken       RefreshToken? // Added opposite relation field
  isVerified         Boolean             @default(false)
  verificationTokens VerificationToken[] // Added opposite relation field

  //stripe related fields

  stripeCustomerId     String?        @unique
  stripeSubscriptionId String?        @unique
  subscription         Subscription[]

  // Opposite relation fields for UserFollow
  followers UserFollow[] @relation("Following")
  following UserFollow[] @relation("Follower")

  role      Role      @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Payment   Payment[]
  Invoice   Invoice[]

  @@index([displayName])
}

model UserFollow {
  id          String   @id @default(uuid()) @map("_id")
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  created_at  DateTime @default(now())

  @@unique([followerId, followingId])
}

model VerificationToken {
  id        String   @id @default(uuid()) @map("_id")
  userId    String
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String   @id @default(uuid()) @map("_id")
  token     String // Store hashed token
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}

// === Stripe payment schema model ======

model SubscriptionPlan {
  id              String          @id @default(uuid()) @map("_id")
  name            String
  description     String?
  amount          Int
  currency        String
  stripePriceId   String          @unique // Stripe price ID
  stripeProductId String          @unique // Stripe product ID
  interval        BillingInterval // e.g., "month", "year"
  isActive        Boolean         @default(true)
  intervalCount   Int             @default(1)
  features        Json?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  subscriptions Subscription[]

  @@index([stripePriceId])
  @@index([isActive])
}

model Subscription {
  id     String           @id @default(uuid()) @map("_id")
  user   User             @relation(fields: [userId], references: [id])
  userId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])
  planId String

  //stripe
  stripeSubscriptionId String?            @unique
  stripeCustomerId     String?            @unique
  status               subscriptionStatus @default(incomplete)

  //Billing details
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean   @default(false)
  cancelAt           DateTime? // When the subscription is set to cancel
  endedAt            DateTime? // When the subscription ended
  trialStart         DateTime? // When the trial period starts
  trialEnd           DateTime? // When the trial period ends

  //payment method
  paymentMethodId String?
  payments        Payment[]
  invoices        Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([stripeSubscriptionId])
  @@index([status])
  @@index([currentPeriodEnd])
}

model Payment {
  id             String        @id @default(uuid()) @map("_id")
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  ///stripe fields
  stripePaymentId   String  @unique // Stripe payment ID
  stripeCustomerId  String

  /// payment details
  amount   Int
  currency String
  status   PaymentStatus @default(processing)
  paymentMethod String?
  description  String?

  //metadata
  metadata  Json?

  //Refund information
  refunded  Boolean @default(false)
  refundAmount  Int?
  refundReason  String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt


  @@index([userId])
  @@index([stripePaymentId])
  @@index([status])
  @@index([createdAt])
}

model Invoice {
  id     String @id @default(uuid()) @map("_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  Subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  //stripe fields
  stripeInvoiceId String @unique
  stripeCustomerId String 

  //invoice details
  number String?
  amount Int
  amountPaid Int  @default(0)
  amountue Int  @default(0)
  currency  String @default("usd")
  status InvoiceStatus

  //dates
  periodStart DateTime?
  periodEnd DateTime?
  dueDate  DateTime?
  paidAt DateTime?

  //Invoice URL
  hostedInvoiceUrl  String?
  invoicePdf  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([stripeInvoiceId])
  @@index([status])

}

// ====== all enums

enum BillingInterval {
  day
  week
  month
  year
}

enum PaymentStatus {
  requirs_payment_method
  requires_confirmation
  requires_action
  requires_capture
  processing
  succeeded
  failed
  refunded
  canceled
}

enum InvoiceStatus {
  draft
  open
  paid
  void
  uncollectible
}

enum subscriptionStatus {
  incomplete
  incomplete_expired
  active
  past_due
  trialing
  unpaid
  paused
  canceled
}

enum Role {
  user
  admin
}

model Post {
  id             String        @id @default(uuid()) @map("_id")
  title          String
  content        String?
  caption        String?
  is_public      Boolean       @default(true)
  is_featured    Boolean
  // Media
  image_url      String?
  image_publicId String? // For Cloudinary deletion
  video_url      String?
  video_publicId String?
  post_likes     PostLike[]
  post_comments  PostComment[]
  post_shares    PostShare[]
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  like_count     Int           @default(0)
  comment_count  Int           @default(0)
  user           User?         @relation("UserPosts", fields: [user_id], references: [id])
  user_id        String?

  admin    admin?  @relation("AdminPosts", fields: [admin_id], references: [id])
  admin_id String?

  workout    Workouts? @relation(fields: [workout_id], references: [id])
  workout_id String?   @unique

  @@index([created_at])
  @@index([title])
  @@index([content])
  @@index([caption])
}

model PostLike {
  id         String   @id @default(uuid()) @map("_id")
  user_id    String
  post_id    String
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id])
  post Post @relation(fields: [post_id], references: [id])

  @@unique([user_id, post_id])
}

model PostComment {
  id         String        @id @default(uuid()) @map("_id")
  content    String
  user       User          @relation(fields: [user_id], references: [id])
  user_id    String
  post       Post          @relation(fields: [post_id], references: [id])
  post_id    String
  parent_id  String? // For nested comments
  parent     PostComment?  @relation("CommentReplies", fields: [parent_id], references: [id])
  replies    PostComment[] @relation("CommentReplies")
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  @@index([created_at])
}

model PostShare {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  post       Post     @relation(fields: [post_id], references: [id])
  post_id    String
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
}

enum ExerciseType {
  strength
  cardio
}

model Workouts {
  id           String  @id @default(uuid()) @map("_id")
  title        String
  template_id  String?
  description  String?
  is_public    Boolean @default(true)
  timer_active Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User?   @relation("UserWorkouts", fields: [user_id], references: [id])
  user_id String?

  template  Template?  @relation("TemplateWorkouts", fields: [template_id], references: [id])
  exercises Exercise[]

  post    Post?   @relation
  post_id String?

  // admin       admin?    @relation("AdminWorkouts", fields: [admin_id], references: [id])
  // admin_id    String?

  @@index([created_at])
  @@index([user_id])
  @@index([template_id])
  @@index([post_id])
  @@index([title])
}

model Exercise {
  id           String        @id @default(uuid()) @map("_id")
  workout      Workouts      @relation(fields: [workout_id], references: [id])
  workout_id   String
  name         String        @default("")
  type         ExerciseType?
  timer_active Boolean       @default(false)
  sets         ExerciseSet[]
  created_at   DateTime      @default(now())

  @@index([workout_id])
  @@index([name])
}

model ExerciseSet {
  id           String   @id @default(uuid()) @map("_id")
  exercise     Exercise @relation(fields: [exercise_id], references: [id])
  exercise_id  String
  set_number   Int      @default(1)
  timer_active Boolean  @default(false)
  weight       Float?
  reps         Int?
  distance_km  Float?
  duration     String   @default("00:00:00")
  created_at   DateTime @default(now())

  @@index([exercise_id])
}

model Template {
  id          String  @id @default(uuid()) @map("_id")
  name        String
  description String?
  is_public   Boolean @default(true)

  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  workouts   Workouts[] @relation("TemplateWorkouts")
}
